{"mappings":"IAMAA,EAHuD,cAA7BC,OAAOC,SAASC,WAA6BF,OAAOC,SAASE,KAAKC,SAAS,aACxD,yBAAsD,G,ICFnGC,EAFkB,CAAC,aAAc,aAAc,uBCG/C,MAAMC,EAAaN,OAAOC,SAASE,KACnC,IAAII,EAAmB,KAgCvB,GANAF,EAAUG,SAAQC,IACZH,EAAWF,SAAS,GAAGL,WAA0BU,OACnDF,EAAmB,CAAEG,SAAS,EAAMC,YAAaF,GAAK,IAItDF,GAAoBA,EAAiBG,QAAS,CAchD,MAAME,EAAe,MACnB,MAAMC,EAAkBb,OAAOC,SAG/B,IAAIa,EAASD,EAAgBE,SAAW,KAMxC,OALAD,GAAUD,EAAgBX,SACtBW,EAAgBG,MAAiC,KAAzBH,EAAgBG,OAC1CF,GAAU,IAAMD,EAAgBG,MAG3BF,CACT,EAXqB,GAarB,IAAIG,EAAkBjB,OAAOC,SAASE,KAAKe,MAAM,GAAGN,IAAeb,WAA0BQ,EAAiBI,eAAe,GAErG,OAApBM,GAAgD,KAApBA,GAA8C,MAApBA,IACxDA,EAAkB,MAGhBA,GAAuD,UAApCA,EAAgBE,UAAU,EAAG,KAClDF,EAAkBA,EAAgBC,MAAM,SAAS,IAInDE,eAAeC,QAAQ,WAAYC,KAAKC,UAAU,CAAEC,QAASxB,OAAOC,SAASE,KAAMM,KAAMF,EAAiBI,YAAac,SAAUR,E,iBAAiBlB,KAClJ2B,QAAQC,IAAI,SAAUP,eAAeQ,QAAQ,aAC7C5B,OAAOC,SAAS4B,QAAQ,GAAG9B,WAA0BQ,EAAiBI,mBACxE,MACEX,OAAOC,SAAS4B,QAAQ,GAAG9B","sources":["src/path.js","src/data/shared-data.js","src/404.js"],"sourcesContent":["/* Necessary in order to serve the urls properly in Github Pages */\r\n\r\nconst isEnvProduction = process.env.NODE_ENV === 'production';\r\nconst isEnvNotLocalhost = window.location.hostname !== 'localhost' && !window.location.href.includes('127.0.0.1');\r\nconst baseRelativePath = (isEnvProduction && isEnvNotLocalhost) ? process.env.BASE_RELATIVE_PATH : '';\r\n\r\nexport default baseRelativePath;\r\n","const pagesData = ['analisis-2', 'analisis-3', 'matematica-discreta'];\r\n\r\nexport default pagesData;\r\n","import baseRelativePath from './path';\r\nimport pagesData from './data/shared-data';\r\n\r\nconst currentURL = window.location.href;\r\nlet currentPageState = null;\r\n\r\n// Single Page Apps for GitHub Pages\r\n// MIT License\r\n// https://github.com/rafgraph/spa-github-pages\r\n// This script takes the current url and converts the path and query\r\n// string into just a query string, and then redirects the browser\r\n// to the new url with only a query string and hash fragment,\r\n// e.g. https://www.foo.tld/one/two?a=b&c=d#qwe, becomes\r\n// https://www.foo.tld/?/one/two&a=b~and~c=d#qwe\r\n// Note: this 404.html file must be at least 512 bytes for it to work\r\n// with Internet Explorer (it is currently > 512 bytes)\r\n\r\n// If you're creating a Project Pages site and NOT using a custom domain,\r\n// then set pathSegmentsToKeep to 1 (enterprise users may need to set it to > 1).\r\n// This way the code will only replace the route part of the path, and not\r\n// the real directory in which the app resides, for example:\r\n// https://username.github.io/repo-name/one/two?a=b&c=d#qwe becomes\r\n// https://username.github.io/repo-name/?/one/two&a=b~and~c=d#qwe\r\n// Otherwise, leave pathSegmentsToKeep as 0.\r\n// Define the number of path segments to keep\r\n// const pathSegmentsToKeep = (baseRelativePath === '') ? 0 : 1;\r\n\r\n// // Get the current location of the page\r\n// const currentLocation = window.location;\r\n\r\npagesData.forEach(page => {\r\n  if (currentURL.includes(`${baseRelativePath}/pages/${page}`)) {\r\n    currentPageState = { isAPage: true, currentPage: page };\r\n  }\r\n});\r\n\r\nif (currentPageState && currentPageState.isAPage) {\r\n  // Build the new URL\r\n  // let newUrl = currentLocation.protocol + '//';\r\n  // newUrl += currentLocation.hostname;\r\n  // if (currentLocation.port && currentLocation.port !== '') {\r\n  //   newUrl += ':' + currentLocation.port;\r\n  // }\r\n\r\n  // newUrl += '/' + currentLocation.pathname.split('/').slice(0, 1 + pathSegmentsToKeep)[pathSegmentsToKeep] + ((baseRelativePath === '') ? '' : '/') + `pages/${currentPageState.currentPage}.html` + '/?/';\r\n  // newUrl += currentLocation.pathname.slice(1).split('/').slice(pathSegmentsToKeep).join('/').replace(/&/g, '~and~').split(`${currentPageState.currentPage}/`)[1];\r\n  // console.log('NEW', newUrl);\r\n  // // Redirect the browser to the new URL\r\n  // currentLocation.replace(newUrl);\r\n\r\n  const fullHostname = (() => {\r\n    const currentLocation = window.location;\r\n\r\n    // Build the new URL\r\n    let newUrl = currentLocation.protocol + '//';\r\n    newUrl += currentLocation.hostname;\r\n    if (currentLocation.port && currentLocation.port !== '') {\r\n      newUrl += ':' + currentLocation.port;\r\n    }\r\n\r\n    return newUrl;\r\n  })();\r\n\r\n  let preciseEndpoint = window.location.href.split(`${fullHostname}${baseRelativePath}/pages/${currentPageState.currentPage}`)[1];\r\n\r\n  if (preciseEndpoint === null || preciseEndpoint === '' || preciseEndpoint === '/') {\r\n    preciseEndpoint = null;\r\n  }\r\n\r\n  if (preciseEndpoint && preciseEndpoint.substring(0, 5) === '.html') {\r\n    preciseEndpoint = preciseEndpoint.split('.html')[1];\r\n  }\r\n\r\n  // document.cookie = 'sessionStorageSameSite=None;SameSite=None;Secure';\r\n  sessionStorage.setItem('redirect', JSON.stringify({ fullUrl: window.location.href, page: currentPageState.currentPage, endpoint: preciseEndpoint, baseRelativePath }));\r\n  console.log('In 404', sessionStorage.getItem('redirect'));\r\n  window.location.replace(`${baseRelativePath}/pages/${currentPageState.currentPage}.html`);\r\n} else {\r\n  window.location.replace(`${baseRelativePath}/`);\r\n}\r\n"],"names":["$371eece7e865b516$export$2e2bcd8739ae039","window","location","hostname","href","includes","$c98ab21f514ae9dc$export$2e2bcd8739ae039","$6af0509f6c87d87a$var$currentURL","$6af0509f6c87d87a$var$currentPageState","forEach","page","isAPage","currentPage","fullHostname","currentLocation","newUrl","protocol","port","preciseEndpoint","split","substring","sessionStorage","setItem","JSON","stringify","fullUrl","endpoint","console","log","getItem","replace"],"version":3,"file":"404.78d6fe26.js.map"}